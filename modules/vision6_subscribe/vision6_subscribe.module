<?php
/**
 * @file
 * Vision6 subscribe module.
 */

/**
 * Implements hook_entity_info().
 */
function vision6_subscribe_entity_info() {
  return array(
    'vision6_subscribe' => array(
      'label' => t('vision6_subscribe'),
      'plural label' => t('Vision 6 Subscribe Block'),
      'entity class' => 'Entity',
      'controller class' => 'VisionSubscribeFormController',
      'base table' => 'vision6_subscribe',
      // 'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'vsid',
      ),
      'bundle keys' => array(
        'bundle' => 'bundle_type',
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'bundles' => array(
        'vision6_subscribe_bundle' => array(
          'label' => 'Vsion 6 Subscribe Form',
          // 'admin' => array(
          //   'path' => 'admin/config/system/vision6/vision6_subscribe/manage',
          //   'access arguments' => array('administer_vision6_subscribe_entities'),
          // ),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function vision6_subscribe_menu() {
  $items['admin/config/system/vision6/vision6_subscribe/manage'] = array(
    'title' => 'Administer vision6_subscribe entity type',
    'page callback' => 'vision6_subscribe_list_entities',
    'access arguments' => array('administer vision6_subscribe entities'),
  );
  $items['admin/config/system/vision6/vision6_subscribe/manage/add'] = array(
    'title' => 'Add a Vision 6 Subscribe Form Block',
    'page callback' => 'vision6_subscribe_add',
    'access arguments' => array('create vision6_subscribe entities'),
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/config/system/vision6/vision6_subscribe/manage/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/system/vision6/vision6_subscribe_bundle/form/%vision6_subscribe'] = array(
    'title callback' => 'vision6_subscribe_title',
    'title arguments' => array(6),
    'page callback' => 'vision6_subscribe_view',
    'page arguments' => array(6),
    'access arguments' => array('view any vision6_subscribe entity'),
  );
  $items['admin/config/system/vision6/vision6_subscribe_bundle/form/%vision6_subscribe/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/config/system/vision6/vision6_subscribe_bundle/form/%vision6_subscribe/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vision6_subscribe_form', 6),
    'access arguments' => array('edit any vision6_subscribe entity'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/system/vision6/vision6_subscribe/form/add'] = array(
    'title' => 'Add a Vision 6 Subscribe Form Block',
    'page callback' => 'vision6_subscribe_add',
    'access arguments' => array('create vision6_subscribe entities'),
  );

  // Process the subscribe form
  $items['vision6/vision6_subscribe/process'] = array(
    'title' => 'Administer vision6_subscribe entity type',
    'page callback' => '_vision6_subscribe_process',
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer vision6_subscribe entities'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function vision6_subscribe_permission() {
  $permissions = array(
    'administer_vision6_subscribe_entities' => array(
      'title' => t('Administer vision6_subscribe entities'),
    ),
    'view any vision6_subscribe entity' => array(
      'title' => t('View any Entity Example Basic entity'),
    ),
    'edit any vision6_subscribe entity' => array(
      'title' => t('Edit any Entity Example Basic entity'),
    ),
    'create vision6_subscribe entities' => array(
      'title' => t('Create Entity Example Basic Entities'),
    ),
  );
  return $permissions;
}
/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 * 
 * @see hook_block_info()
 */
function vision6_subscribe_block_info() {
  $blocks = array();
  foreach (vision6_subscribe_load_multiple() as $entity) {
    $blocks['vision6_subscribe' . $entity->vsid] = array(
      'info' => t('Vision 6 Subscribe: &nbsp;').t($entity->title),
    );
  }
  return $blocks;
}

/**
 * Implements hook_block_view();
 *
 * @see hook_block_info()
 */
function vision6_subscribe_block_view($delta = '') {
  $entity = vision6_subscribe_load(str_replace('vision6_subscribe', '', $delta));
  $block['subject'] = $entity->title;
  $block['content'] = drupal_get_form('_vision6_subscribe_subscribe_form', $entity);
  return $block;
}

function vision6_subscribe_theme($existing, $type, $theme, $path) {
  $themes = array();
  $module_path = drupal_get_path('module', 'vision6_subscribe') .'/templates';
  foreach (vision6_subscribe_load_multiple() as $entity) {
    $themes['vision6_subscribe' . $entity->vsid] = array(
      'template' => 'vision6-subscribe',
      'path' => $module_path,
    );
  }
  $themes['_vision6_subscribe_subscribe_form'] = array(
    'render element' => 'form',
    'template' => 'vision6-subscribe-subscribe-form',
    'path' => drupal_get_path('module', 'vision6_subscribe') . '/templates',
  );
  return $themes;
}

/**
 * Returns a render array with all vision6_subscribe entities.
 *
 * In this basic example we know that there won't be many entities,
 * so we'll just load them all for display. See pager_example.module
 * to implement a pager. Most implementations would probably do this
 * with the contrib Entity API module, or a view using views module,
 * but we avoid using non-core features in the Examples project.
 *
 * @see pager_example.module
 */
function vision6_subscribe_list_entities() {
  $content = array();
  // Load all of our entities.
  $entities = vision6_subscribe_load_multiple();
  if (!empty($entities)) {
    foreach ($entities as $entity) {
      // Create tabular rows for our entities.
      $rows[] = array(
        'data' => array(
          'id' => $entity->vsid,
          'title' => l($entity->title, 'admin/config/system/vision6/vision6_subscribe/form/' . $entity->vsid),
          'bundle' => $entity->bundle_type,
        ),
      );
    }
    // Put our entities into a themed table. See theme_table() for details.
    $content['entity_table'] = array(
      '#theme' => 'table',
      '#rows' => $rows,
      '#header' => array(t('ID'), t('Title'), t('Bundle')),
    );
  }
  else {
    // There were no entities. Tell the user.
    $content[] = array(
      '#type' => 'item',
      '#markup' => t('No vision6_subscribe entities currently exist.'),
    );
  }
  return $content;
}

/**
 * Callback for a page title when this entity is displayed.
 */
function vision6_subscribe_title($entity) {
  return t('Vision 6 Subscribe Form (title=@title)', array('@title' => $entity->title));
}

/**
 * Menu callback to display an entity.
 *
 * As we load the entity for display, we're responsible for invoking a number
 * of hooks in their proper order.
 *
 * @see hook_entity_prepare_view()
 * @see hook_entity_view()
 * @see hook_entity_view_alter()
 */
function vision6_subscribe_view($entity, $view_mode = 'default') {
  // Our entity type, for convenience.
  $entity_type = 'vision6_subscribe';
  // Start setting up the content.
  $entity->content = array(
    '#view_mode' => $view_mode,
  );
  // Build fields content - this is where the Field API really comes in to play.
  // The task has very little code here because it all gets taken care of by
  // field module.
  // field_attach_prepare_view() lets the fields load any data they need
  // before viewing.
  field_attach_prepare_view($entity_type, array($entity->vsid => $entity),
    $view_mode);
  // We call entity_prepare_view() so it can invoke hook_entity_prepare_view()
  // for us.
  entity_prepare_view($entity_type, array($entity->vsid => $entity));
  // Now field_attach_view() generates the content for the fields.
  $entity->content += field_attach_view($entity_type, $entity, $view_mode);

  // OK, Field API done, now we can set up some of our own data.
  $entity->content['created'] = array(
    '#type' => 'item',
    '#title' => t('Created date'),
    '#markup' => format_date($entity->created),
  );
  $entity->content['title'] = array(
    '#type' => 'item',
    '#title' => t('Title'),
    '#markup' => $entity->title,
  );
  $entity->content['listid'] = array(
    '#type' => 'item',
    '#title' => t('List ID'),
    '#markup' => $entity->listid,
  );
  $entity->content['firstname'] = array(
    '#type' => 'item',
    '#title' => t('First Name'),
    '#markup' => $entity->firstname,
  );
  $entity->content['lastname'] = array(
    '#type' => 'item',
    '#title' => t('Last Name'),
    '#markup' => $entity->lastname,
  );
  $entity->content['email'] = array(
    '#type' => 'item',
    '#title' => t('Email'),
    '#markup' => $entity->email,
  );
  $entity->content['approval'] = array(
    '#type' => 'item',
    '#title' => t('Approval Text'),
    '#markup' => check_markup($entity->approval, $entity->approval_format),
  );
  $entity->content['body'] = array(
    '#type' => 'item',
    '#title' => t('Body'),
    '#markup' => check_markup($entity->body, $entity->body_format),
  );

  // Now to invoke some hooks. We need the language code for
  // hook_entity_view(), so let's get that.
  global $language;
  $langcode = $language->language;
  // And now invoke hook_entity_view().
  module_invoke_all('entity_view', $entity, $entity_type, $view_mode,
    $langcode);
  // Now invoke hook_entity_view_alter().
  drupal_alter(array('vision6_subscribe_view', 'entity_view'),
    $entity->content, $entity_type);

  // And finally return the content.
  $entity_content = $entity->content;
  return $entity_content;
}

/**
 * Implements hook_field_extra_fields().
 *
 * This exposes the "extra fields" (usually properties that can be configured
 * as if they were fields) of the entity as pseudo-fields
 * so that they get handled by the Entity and Field core functionality.
 * Node titles get treated in a similar manner.
 */
function vision6_subscribe_field_extra_fields() {
  $form_elements['title'] = array(
    'label' => t('Title'),
    'description' => t('Title (an extra form field)'),
    'weight' => -5,
  );
  $display_elements['created'] = array(
    'label' => t('Creation date'),
    'description' => t('Creation date (an extra display field)'),
    'weight' => 0,
  );
  $display_elements['title'] = array(
    'label' => t('Title'),
    'description' => t('Just like title, but trying to point out that it is a separate property'),
    'weight' => 0,
  );

  // Since we have only one bundle type, we'll just provide the extra_fields
  // for it here.
  $extra_fields['vision6_subscribe']['vision6_subscribe_bundle']['form'] = $form_elements;
  $extra_fields['vision6_subscribe']['vision6_subscribe_bundle']['display'] = $display_elements;

  return $extra_fields;
}

function vision6_subscribe_load($vsid = NULL, $reset = FALSE) {
  $vsids = (isset($vsid) ? array($vsid) : array());
  $basic = vision6_subscribe_load_multiple($vsids, array(), $reset);
  return $basic ? reset($basic) : FALSE;
}

/**
 * Loads multiple basic entities.
 *
 * We only need to pass this request along to entity_load(), which
 * will in turn call the load() method of our entity controller class.
 */
function vision6_subscribe_load_multiple($vsids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('vision6_subscribe', $vsids, $conditions, $reset);
}

/**
 * Provides a wrapper on the edit form to add a new entity.
 */
function vision6_subscribe_add() {
  // Create a basic entity structure to be used and passed to the validation
  // and submission functions.
  $entity = entity_get_controller('vision6_subscribe')->create();
  return drupal_get_form('vision6_subscribe_form', $entity);
}

/**
 * Form function to create an vision6_subscribe entity.
 *
 * The pattern is:
 * - Set up the form for the data that is specific to your
 *   entity: the columns of your base table.
 * - Call on the Field API to pull in the form elements
 *   for fields attached to the entity.
 */
function vision6_subscribe_form($form, &$form_state, $entity) {
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#description' => t('The title of the block'),
    '#required' => FALSE,
    '#default_value' => $entity->title,
  );

  $form['listid'] = array(
    '#type' => 'select',
    '#options' => _vision6_get_contact_list_id(),
    '#title' => t('Contact List'),
    '#description' => t('The Vision 6 Contact List to subscribe the user to.'),
    '#required' => TRUE,
    '#default_value' => $entity->listid,
  );

  $form['firstname'] = array(
    '#type' => 'textfield',
    '#title' => t('First Name'),
    '#description' => t('The title of the users firstname field, this gets imported into Vision 6 as "First Name". If this field is empty the field will not appear.'),
    '#required' => FALSE,
    '#default_value' => $entity->firstname,
  );

  $form['lastname'] = array(
    '#type' => 'textfield',
    '#title' => t('Last Name'),
    '#description' => t('The title of the users lastname field, this gets imported into Vision 6 as "Last Name". If this field is empty the field will not appear.'),
    '#required' => FALSE,
    '#default_value' => $entity->lastname,
  );

  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#description' => t('The title of the users email address field.'),
    '#required' => TRUE,
    '#default_value' => $entity->email,
  );

  $form['approval'] = array(
    '#type' => 'text_format',
    '#title' => t('Approval'),
    '#description' => t('The text to accompany a mandatory checkbox, this can be used to ensure the user has read the Ts & Cs for example. This field is not sent to Vision 6. If this field is empty the field will not appear.'),
    '#required' => FALSE,
    '#default_value' => $entity->approval,
    '#format' => $entity->approval_format,
  );

  $form['body'] = array(
    '#type' => 'text_format',
    '#title' => t('Body'),
    '#description' => t('Body text for the block. If this field is empty the field will not appear.'),
    '#required' => FALSE,
    '#default_value' => $entity->body,
    '#format' => $entity->body_format,
  );

  $form['basic_entity'] = array(
    '#type' => 'value',
    '#value' => $entity,
  );

  field_attach_form('vision6_subscribe', $entity, $form, $form_state);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 100,
  );
  $form['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
    '#submit' => array('vision6_subscribe_edit_delete'),
    '#weight' => 200,
  );

  return $form;
}


/**
 * Validation handler for vision6_subscribe_add_form form.
 *
 * We pass things straight through to the Field API to handle validation
 * of the attached fields.
 */
function vision6_subscribe_form_validate($form, &$form_state) {
  field_attach_form_validate('vision6_subscribe', $form_state['values']['basic_entity'], $form, $form_state);
}


/**
 * Form submit handler: Submits basic_add_form information.
 */
function vision6_subscribe_form_submit($form, &$form_state) {
  $entity = $form_state['values']['basic_entity'];
  $entity->title = $form_state['values']['title'];
  $entity->listid = $form_state['values']['listid'];
  $entity->firstname = $form_state['values']['firstname'];
  $entity->lastname = $form_state['values']['lastname'];
  $entity->email = $form_state['values']['email'];
  $entity->approval = $form_state['values']['approval']['value'];
  $entity->approval_format = $form_state['values']['approval']['format'];
  $entity->body = $form_state['values']['body']['value'];
  $entity->body_format = $form_state['values']['body']['format'];
  field_attach_submit('vision6_subscribe', $entity, $form, $form_state);
  $entity = vision6_subscribe_save($entity);
  $form_state['redirect'] = 'admin/config/system/vision6/vision6_subscribe/form/' . $entity->vsid;
}

/**
 * Form deletion handler.
 *
 * @todo: 'Are you sure?' message.
 */
function vision6_subscribe_edit_delete($form, &$form_state) {
  $entity = $form_state['values']['basic_entity'];
  vision6_subscribe_delete($entity);
  drupal_set_message(t('The entity %title (ID %id) has been deleted',
    array('%title' => $entity->title, '%id' => $entity->vsid))
  );
  $form_state['redirect'] = 'examples/vision6_subscribe';
}

/**
 * We save the entity by calling the controller.
 */
function vision6_subscribe_save(&$entity) {
  return entity_get_controller('vision6_subscribe')->save($entity);
}

/**
 * Use the controller to delete the entity.
 */
function vision6_subscribe_delete($entity) {
  entity_get_controller('vision6_subscribe')->delete($entity);
}

function _vision6_subscribe_subscribe_form($form, &$form_state, $entity) {
  global $user;
  $form['subscribe_message'] = array(
    '#markup' => '<div id="subscribe_message" class="messages--error messages error" style="display:none;"></div>',
    '#weight' => -100,
  );
  if (!empty($entity->firstname)) {
    $form['firstname'] = array(
      '#title' => $entity->firstname,
      '#type' => 'textfield',
      '#attributes' => array(
        'placeholder' => $entity->firstname,
      ),
    );
    drupal_add_js(array('vision6_subscribe' => array('firstname' => $entity->firstname)), 'setting');
  }
  if (!empty($entity->lastname)) {
    $form['lastname'] = array(
      '#title' => $entity->lastname,
      '#type' => 'textfield',
      '#attributes' => array(
        'placeholder' => $entity->lastname,
      ),
    );
    drupal_add_js(array('vision6_subscribe' => array('lastname' => $entity->lastname)), 'setting');
  }
  if (!empty($entity->email)) {
    $form['email'] = array(
      '#title' => $entity->email,
      '#type' => 'textfield',
      '#required' => TRUE,
      '#attributes' => array(
        'placeholder' => $entity->email,
      ),
      '#default_value' => $user->uid > 0 ? $user->mail : '',
    );
    drupal_add_js(array('vision6_subscribe' => array('email' => $entity->email)), 'setting');
  }
  if (!empty($entity->body)) {
    $form['body'] = array(
      '#title' => 'Body',
      '#markup' => check_markup($entity->body, $entity->body_format),
    );
  }
  if (!empty($entity->approval)) {
    $form['approval'] = array(
      '#title' => check_markup($entity->approval, $entity->approval_format),
      '#type' => 'checkbox',
      '#required' => TRUE,
    );
    drupal_add_js(array('vision6_subscribe' => array('approval' => $entity->approval)), 'setting');
  }
  if (!empty($entity->listid)) {
    $form['listid'] = array(
      '#type' => 'hidden',
      '#default_value' => $entity->listid,
    );
  }
  $form['submit'] = array(
    '#value' => t('Subscribe'),
    '#type' => 'submit',
  );

  $form['#attached']['js'] = array(
    drupal_get_path('module', 'vision6_subscribe') . '/js/vision6_subscribe.js',
  );

  $form['#validate'][] = '_vision6_subscribe_subscribe_form_validate';

  if (function_exists('honeypot_add_form_protection')) {
    honeypot_add_form_protection($form, $form_state, array('honeypot', 'time_restriction'));
  }
  return $form;
}

function _vision6_subscribe_subscribe_form_validate(&$form, &$form_state) {
  if (!filter_var($form_state['values']['email'], FILTER_VALIDATE_EMAIL)) {
    form_set_error('email', t('Please enter a valid email address.'));
  }
}

function _vision6_subscribe_subscribe_form_submit(&$form, &$form_state) {
  try {
    $client = _vision6_get_api_client();
    if (!$client) {
      watchdog('vision6', 'Unable to retrieve an API client, is the JsonRPC library installed correctly?', array(), WATCHDOG_CRITICAL);
      drupal_set_message(t('Unable to retrieve an API client, is the JsonRPC library installed correctly?'), 'error');

      return;
    }
    $contact_details = array(
      'Email' => $form_state['values']['email'],
    );
    if (isset($form_state['values']['firstname'])) {
      $contact_details['First Name'] = $form_state['values']['firstname'];
    }
    if (isset($form_state['values']['lastname'])) {
      $contact_details['Last Name'] = $form_state['values']['lastname'];
    }
    $new_subscriber = array(
      variable_get('vision6_api_key'),
      $form_state['values']['listid'],
      $contact_details,
    );
    $newsub = $client->subscribeContact($new_subscriber);
    if ($newsub > 0) {
      $list = _vision6_get_contact_list_by_id($form_state['values']['listid']);
      if ($list) {
        $listname = $list[0]['name'];
      }
      else {
        $listname = '';
      }
      drupal_set_message(t('Thank you for subscribing to the @list list.', array('@list' => $listname)));
    }
  }
  catch (Exception $e) {
    watchdog_exception('vision6_subscribe', $e);
    drupal_set_message(t('We could not process your subscription: &nbsp;') . check_plain($e->getMessage()), 'error');
  }
}
